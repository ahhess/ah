// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package bwbvrlt.model;

import bwbvrlt.model.Rlt;
import bwbvrlt.model.RltDataOnDemand;
import bwbvrlt.model.RltErgebnis;
import bwbvrlt.model.RltErgebnisDataOnDemand;
import bwbvrlt.model.RltSpieler;
import bwbvrlt.model.RltSpielerDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RltErgebnisDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RltErgebnisDataOnDemand: @Component;
    
    private Random RltErgebnisDataOnDemand.rnd = new SecureRandom();
    
    private List<RltErgebnis> RltErgebnisDataOnDemand.data;
    
    @Autowired
    private RltDataOnDemand RltErgebnisDataOnDemand.rltDataOnDemand;
    
    @Autowired
    private RltSpielerDataOnDemand RltErgebnisDataOnDemand.rltSpielerDataOnDemand;
    
    public RltErgebnis RltErgebnisDataOnDemand.getNewTransientRltErgebnis(int index) {
        RltErgebnis obj = new RltErgebnis();
        setDisz(obj, index);
        setPlatz(obj, index);
        setPunkte(obj, index);
        setRlt(obj, index);
        setRltSpieler(obj, index);
        return obj;
    }
    
    public void RltErgebnisDataOnDemand.setDisz(RltErgebnis obj, int index) {
        String disz = "di_" + index;
        if (disz.length() > 4) {
            disz = disz.substring(0, 4);
        }
        obj.setDisz(disz);
    }
    
    public void RltErgebnisDataOnDemand.setPlatz(RltErgebnis obj, int index) {
        int platz = index;
        obj.setPlatz(platz);
    }
    
    public void RltErgebnisDataOnDemand.setPunkte(RltErgebnis obj, int index) {
        double punkte = new Integer(index).doubleValue();
        obj.setPunkte(punkte);
    }
    
    public void RltErgebnisDataOnDemand.setRlt(RltErgebnis obj, int index) {
        Rlt rlt = rltDataOnDemand.getRandomRlt();
        obj.setRlt(rlt);
    }
    
    public void RltErgebnisDataOnDemand.setRltSpieler(RltErgebnis obj, int index) {
        RltSpieler rltSpieler = rltSpielerDataOnDemand.getRandomRltSpieler();
        obj.setRltSpieler(rltSpieler);
    }
    
    public RltErgebnis RltErgebnisDataOnDemand.getSpecificRltErgebnis(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        RltErgebnis obj = data.get(index);
        Long id = obj.getId();
        return RltErgebnis.findRltErgebnis(id);
    }
    
    public RltErgebnis RltErgebnisDataOnDemand.getRandomRltErgebnis() {
        init();
        RltErgebnis obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return RltErgebnis.findRltErgebnis(id);
    }
    
    public boolean RltErgebnisDataOnDemand.modifyRltErgebnis(RltErgebnis obj) {
        return false;
    }
    
    public void RltErgebnisDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = RltErgebnis.findRltErgebnisEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'RltErgebnis' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<RltErgebnis>();
        for (int i = 0; i < 10; i++) {
            RltErgebnis obj = getNewTransientRltErgebnis(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
